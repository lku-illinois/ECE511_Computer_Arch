// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inst.proto

#include "inst.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ProtoMessage {
PROTOBUF_CONSTEXPR InstHeader::InstHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obj_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tick_freq_)*/uint64_t{0u}
  , /*decltype(_impl_.ver_)*/0u
  , /*decltype(_impl_.has_mem_)*/false} {}
struct InstHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstHeaderDefaultTypeInternal() {}
  union {
    InstHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstHeaderDefaultTypeInternal _InstHeader_default_instance_;
PROTOBUF_CONSTEXPR Inst_MemAccess::Inst_MemAccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.addr_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.mem_flags_)*/0u} {}
struct Inst_MemAccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Inst_MemAccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Inst_MemAccessDefaultTypeInternal() {}
  union {
    Inst_MemAccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Inst_MemAccessDefaultTypeInternal _Inst_MemAccess_default_instance_;
PROTOBUF_CONSTEXPR Inst::Inst(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mem_access_)*/{}
  , /*decltype(_impl_.inst_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pc_)*/uint64_t{0u}
  , /*decltype(_impl_.inst_)*/0u
  , /*decltype(_impl_.nodeid_)*/0u
  , /*decltype(_impl_.tick_)*/uint64_t{0u}
  , /*decltype(_impl_.cpuid_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.inst_flags_)*/0u} {}
struct InstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstDefaultTypeInternal() {}
  union {
    Inst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstDefaultTypeInternal _Inst_default_instance_;
}  // namespace ProtoMessage
static ::_pb::Metadata file_level_metadata_inst_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_inst_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_inst_2eproto = nullptr;

const uint32_t TableStruct_inst_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.obj_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.tick_freq_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.has_mem_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_.mem_flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.pc_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.inst_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.inst_bytes_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.cpuid_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.tick_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.inst_flags_),
  PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.mem_access_),
  1,
  2,
  0,
  3,
  5,
  4,
  6,
  7,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::ProtoMessage::InstHeader)},
  { 14, 23, -1, sizeof(::ProtoMessage::Inst_MemAccess)},
  { 26, 41, -1, sizeof(::ProtoMessage::Inst)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ProtoMessage::_InstHeader_default_instance_._instance,
  &::ProtoMessage::_Inst_MemAccess_default_instance_._instance,
  &::ProtoMessage::_Inst_default_instance_._instance,
};

const char descriptor_table_protodef_inst_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ninst.proto\022\014ProtoMessage\"P\n\nInstHeader"
  "\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \002(\r:\0010\022\021\n\ttick"
  "_freq\030\003 \002(\004\022\017\n\007has_mem\030\004 \002(\010\"\277\006\n\004Inst\022\n\n"
  "\002pc\030\001 \002(\004\022\014\n\004inst\030\002 \001(\007\022\022\n\ninst_bytes\030\t "
  "\001(\014\022\016\n\006nodeid\030\003 \001(\r\022\r\n\005cpuid\030\004 \001(\r\022\014\n\004ti"
  "ck\030\005 \001(\006\022)\n\004type\030\006 \001(\0162\033.ProtoMessage.In"
  "st.InstType\022\022\n\ninst_flags\030\007 \001(\r\0220\n\nmem_a"
  "ccess\030\010 \003(\0132\034.ProtoMessage.Inst.MemAcces"
  "s\032:\n\tMemAccess\022\014\n\004addr\030\001 \002(\004\022\014\n\004size\030\002 \002"
  "(\r\022\021\n\tmem_flags\030\003 \001(\r\"\256\004\n\010InstType\022\010\n\004No"
  "ne\020\000\022\n\n\006IntAlu\020\001\022\n\n\006IntMul\020\002\022\n\n\006IntDiv\020\003"
  "\022\014\n\010FloatAdd\020\004\022\014\n\010FloatCmp\020\005\022\014\n\010FloatCvt"
  "\020\006\022\r\n\tFloatMult\020\007\022\014\n\010FloatDiv\020\010\022\r\n\tFloat"
  "Sqrt\020\t\022\016\n\nSIMDIntAdd\020\n\022\021\n\rSIMDIntAddAcc\020"
  "\013\022\016\n\nSIMDIntAlu\020\014\022\016\n\nSIMDIntCmp\020\r\022\016\n\nSIM"
  "DIntCvt\020\016\022\014\n\010SIMDMisc\020\017\022\017\n\013SIMDIntMult\020\020"
  "\022\022\n\016SIMDIntMultAcc\020\021\022\020\n\014SIMDIntShift\020\022\022\023"
  "\n\017SIMDIntShiftAcc\020\023\022\014\n\010SIMDSqrt\020\024\022\020\n\014SIM"
  "DFloatAdd\020\025\022\020\n\014SIMDFloatAlu\020\026\022\020\n\014SIMDFlo"
  "atCmp\020\027\022\020\n\014SIMDFloatCvt\020\030\022\020\n\014SIMDFloatDi"
  "v\020\031\022\021\n\rSIMDFloatMisc\020\032\022\021\n\rSIMDFloatMult\020"
  "\033\022\024\n\020SIMDFloatMultAdd\020\034\022\021\n\rSIMDFloatSqrt"
  "\020\035\022\013\n\007MemRead\020\036\022\014\n\010MemWrite\020\037\022\r\n\tIprAcce"
  "ss\020 \022\020\n\014InstPrefetch\020!"
  ;
static ::_pbi::once_flag descriptor_table_inst_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_inst_2eproto = {
    false, false, 942, descriptor_table_protodef_inst_2eproto,
    "inst.proto",
    &descriptor_table_inst_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_inst_2eproto::offsets,
    file_level_metadata_inst_2eproto, file_level_enum_descriptors_inst_2eproto,
    file_level_service_descriptors_inst_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_inst_2eproto_getter() {
  return &descriptor_table_inst_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_inst_2eproto(&descriptor_table_inst_2eproto);
namespace ProtoMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inst_InstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inst_2eproto);
  return file_level_enum_descriptors_inst_2eproto[0];
}
bool Inst_InstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Inst_InstType Inst::None;
constexpr Inst_InstType Inst::IntAlu;
constexpr Inst_InstType Inst::IntMul;
constexpr Inst_InstType Inst::IntDiv;
constexpr Inst_InstType Inst::FloatAdd;
constexpr Inst_InstType Inst::FloatCmp;
constexpr Inst_InstType Inst::FloatCvt;
constexpr Inst_InstType Inst::FloatMult;
constexpr Inst_InstType Inst::FloatDiv;
constexpr Inst_InstType Inst::FloatSqrt;
constexpr Inst_InstType Inst::SIMDIntAdd;
constexpr Inst_InstType Inst::SIMDIntAddAcc;
constexpr Inst_InstType Inst::SIMDIntAlu;
constexpr Inst_InstType Inst::SIMDIntCmp;
constexpr Inst_InstType Inst::SIMDIntCvt;
constexpr Inst_InstType Inst::SIMDMisc;
constexpr Inst_InstType Inst::SIMDIntMult;
constexpr Inst_InstType Inst::SIMDIntMultAcc;
constexpr Inst_InstType Inst::SIMDIntShift;
constexpr Inst_InstType Inst::SIMDIntShiftAcc;
constexpr Inst_InstType Inst::SIMDSqrt;
constexpr Inst_InstType Inst::SIMDFloatAdd;
constexpr Inst_InstType Inst::SIMDFloatAlu;
constexpr Inst_InstType Inst::SIMDFloatCmp;
constexpr Inst_InstType Inst::SIMDFloatCvt;
constexpr Inst_InstType Inst::SIMDFloatDiv;
constexpr Inst_InstType Inst::SIMDFloatMisc;
constexpr Inst_InstType Inst::SIMDFloatMult;
constexpr Inst_InstType Inst::SIMDFloatMultAdd;
constexpr Inst_InstType Inst::SIMDFloatSqrt;
constexpr Inst_InstType Inst::MemRead;
constexpr Inst_InstType Inst::MemWrite;
constexpr Inst_InstType Inst::IprAccess;
constexpr Inst_InstType Inst::InstPrefetch;
constexpr Inst_InstType Inst::InstType_MIN;
constexpr Inst_InstType Inst::InstType_MAX;
constexpr int Inst::InstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class InstHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<InstHeader>()._impl_._has_bits_);
  static void set_has_obj_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tick_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_mem(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

InstHeader::InstHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.InstHeader)
}
InstHeader::InstHeader(const InstHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obj_id_){}
    , decltype(_impl_.tick_freq_){}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.has_mem_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obj_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obj_id()) {
    _this->_impl_.obj_id_.Set(from._internal_obj_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tick_freq_, &from._impl_.tick_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_mem_) -
    reinterpret_cast<char*>(&_impl_.tick_freq_)) + sizeof(_impl_.has_mem_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstHeader)
}

inline void InstHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obj_id_){}
    , decltype(_impl_.tick_freq_){uint64_t{0u}}
    , decltype(_impl_.ver_){0u}
    , decltype(_impl_.has_mem_){false}
  };
  _impl_.obj_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstHeader::~InstHeader() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obj_id_.Destroy();
}

void InstHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.obj_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.tick_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_mem_) -
        reinterpret_cast<char*>(&_impl_.tick_freq_)) + sizeof(_impl_.has_mem_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obj_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ProtoMessage.InstHeader.obj_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 ver = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ver(&has_bits);
          _impl_.ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 tick_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tick_freq(&has_bits);
          _impl_.tick_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool has_mem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_mem(&has_bits);
          _impl_.has_mem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obj_id().data(), static_cast<int>(this->_internal_obj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoMessage.InstHeader.obj_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obj_id(), target);
  }

  // required uint32 ver = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tick_freq(), target);
  }

  // required bool has_mem = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_mem(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstHeader)
  return target;
}

size_t InstHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.InstHeader)
  size_t total_size = 0;

  if (_internal_has_obj_id()) {
    // required string obj_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());
  }

  if (_internal_has_tick_freq()) {
    // required uint64 tick_freq = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tick_freq());
  }

  if (_internal_has_ver()) {
    // required uint32 ver = 2 [default = 0];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());
  }

  if (_internal_has_has_mem()) {
    // required bool has_mem = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t InstHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstHeader)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string obj_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_id());

    // required uint64 tick_freq = 3;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tick_freq());

    // required uint32 ver = 2 [default = 0];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());

    // required bool has_mem = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstHeader::GetClassData() const { return &_class_data_; }


void InstHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstHeader*>(&to_msg);
  auto& from = static_cast<const InstHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_obj_id(from._internal_obj_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tick_freq_ = from._impl_.tick_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ver_ = from._impl_.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.has_mem_ = from._impl_.has_mem_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstHeader::CopyFrom(const InstHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstHeader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InstHeader::InternalSwap(InstHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obj_id_, lhs_arena,
      &other->_impl_.obj_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.has_mem_)
      + sizeof(InstHeader::_impl_.has_mem_)
      - PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.tick_freq_)>(
          reinterpret_cast<char*>(&_impl_.tick_freq_),
          reinterpret_cast<char*>(&other->_impl_.tick_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inst_2eproto_getter, &descriptor_table_inst_2eproto_once,
      file_level_metadata_inst_2eproto[0]);
}

// ===================================================================

class Inst_MemAccess::_Internal {
 public:
  using HasBits = decltype(std::declval<Inst_MemAccess>()._impl_._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mem_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Inst_MemAccess::Inst_MemAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.Inst.MemAccess)
}
Inst_MemAccess::Inst_MemAccess(const Inst_MemAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Inst_MemAccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.mem_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.addr_, &from._impl_.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mem_flags_) -
    reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.mem_flags_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst.MemAccess)
}

inline void Inst_MemAccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.addr_){uint64_t{0u}}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.mem_flags_){0u}
  };
}

Inst_MemAccess::~Inst_MemAccess() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst.MemAccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Inst_MemAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Inst_MemAccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Inst_MemAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst.MemAccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mem_flags_) -
        reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.mem_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inst_MemAccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mem_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mem_flags(&has_bits);
          _impl_.mem_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inst_MemAccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst.MemAccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_addr(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // optional uint32 mem_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mem_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst.MemAccess)
  return target;
}

size_t Inst_MemAccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoMessage.Inst.MemAccess)
  size_t total_size = 0;

  if (_internal_has_addr()) {
    // required uint64 addr = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_addr());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return total_size;
}
size_t Inst_MemAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst.MemAccess)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 addr = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_addr());

    // required uint32 size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 mem_flags = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mem_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inst_MemAccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Inst_MemAccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inst_MemAccess::GetClassData() const { return &_class_data_; }


void Inst_MemAccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Inst_MemAccess*>(&to_msg);
  auto& from = static_cast<const Inst_MemAccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst.MemAccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mem_flags_ = from._impl_.mem_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inst_MemAccess::CopyFrom(const Inst_MemAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst.MemAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst_MemAccess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Inst_MemAccess::InternalSwap(Inst_MemAccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.mem_flags_)
      + sizeof(Inst_MemAccess::_impl_.mem_flags_)
      - PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inst_MemAccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inst_2eproto_getter, &descriptor_table_inst_2eproto_once,
      file_level_metadata_inst_2eproto[1]);
}

// ===================================================================

class Inst::_Internal {
 public:
  using HasBits = decltype(std::declval<Inst>()._impl_._has_bits_);
  static void set_has_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inst(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inst_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nodeid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inst_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Inst::Inst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.Inst)
}
Inst::Inst(const Inst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Inst* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mem_access_){from._impl_.mem_access_}
    , decltype(_impl_.inst_bytes_){}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.inst_){}
    , decltype(_impl_.nodeid_){}
    , decltype(_impl_.tick_){}
    , decltype(_impl_.cpuid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.inst_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inst_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inst_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_inst_bytes()) {
    _this->_impl_.inst_bytes_.Set(from._internal_inst_bytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pc_, &from._impl_.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inst_flags_) -
    reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.inst_flags_));
  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst)
}

inline void Inst::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mem_access_){arena}
    , decltype(_impl_.inst_bytes_){}
    , decltype(_impl_.pc_){uint64_t{0u}}
    , decltype(_impl_.inst_){0u}
    , decltype(_impl_.nodeid_){0u}
    , decltype(_impl_.tick_){uint64_t{0u}}
    , decltype(_impl_.cpuid_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.inst_flags_){0u}
  };
  _impl_.inst_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inst_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Inst::~Inst() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Inst::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mem_access_.~RepeatedPtrField();
  _impl_.inst_bytes_.Destroy();
}

void Inst::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Inst::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mem_access_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.inst_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.pc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inst_flags_) -
        reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.inst_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inst::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 pc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pc(&has_bits);
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 inst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_inst(&has_bits);
          _impl_.inst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nodeid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_nodeid(&has_bits);
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cpuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cpuid(&has_bits);
          _impl_.cpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_tick(&has_bits);
          _impl_.tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .ProtoMessage.Inst.InstType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoMessage::Inst_InstType_IsValid(val))) {
            _internal_set_type(static_cast<::ProtoMessage::Inst_InstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inst_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_inst_flags(&has_bits);
          _impl_.inst_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mem_access(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes inst_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_inst_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inst::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 pc = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pc(), target);
  }

  // optional fixed32 inst = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_inst(), target);
  }

  // optional uint32 nodeid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nodeid(), target);
  }

  // optional uint32 cpuid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cpuid(), target);
  }

  // optional fixed64 tick = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_tick(), target);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // optional uint32 inst_flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_inst_flags(), target);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mem_access_size()); i < n; i++) {
    const auto& repfield = this->_internal_mem_access(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes inst_bytes = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_inst_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst)
  return target;
}

size_t Inst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst)
  size_t total_size = 0;

  // required uint64 pc = 1;
  if (_internal_has_pc()) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pc());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  total_size += 1UL * this->_internal_mem_access_size();
  for (const auto& msg : this->_impl_.mem_access_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes inst_bytes = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_inst_bytes());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional fixed32 inst = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 nodeid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodeid());
    }

    // optional fixed64 tick = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 cpuid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpuid());
    }

    // optional .ProtoMessage.Inst.InstType type = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 inst_flags = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inst_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inst::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Inst::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inst::GetClassData() const { return &_class_data_; }


void Inst::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Inst*>(&to_msg);
  auto& from = static_cast<const Inst&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mem_access_.MergeFrom(from._impl_.mem_access_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_inst_bytes(from._internal_inst_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pc_ = from._impl_.pc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.inst_ = from._impl_.inst_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nodeid_ = from._impl_.nodeid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tick_ = from._impl_.tick_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cpuid_ = from._impl_.cpuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.inst_flags_ = from._impl_.inst_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inst::CopyFrom(const Inst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.mem_access_))
    return false;
  return true;
}

void Inst::InternalSwap(Inst* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mem_access_.InternalSwap(&other->_impl_.mem_access_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inst_bytes_, lhs_arena,
      &other->_impl_.inst_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_flags_)
      + sizeof(Inst::_impl_.inst_flags_)
      - PROTOBUF_FIELD_OFFSET(Inst, _impl_.pc_)>(
          reinterpret_cast<char*>(&_impl_.pc_),
          reinterpret_cast<char*>(&other->_impl_.pc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inst::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inst_2eproto_getter, &descriptor_table_inst_2eproto_once,
      file_level_metadata_inst_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoMessage::InstHeader*
Arena::CreateMaybeMessage< ::ProtoMessage::InstHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::InstHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::Inst_MemAccess*
Arena::CreateMaybeMessage< ::ProtoMessage::Inst_MemAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::Inst_MemAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoMessage::Inst*
Arena::CreateMaybeMessage< ::ProtoMessage::Inst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoMessage::Inst >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
