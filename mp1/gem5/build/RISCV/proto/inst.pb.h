// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inst.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inst_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inst_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inst_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inst_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inst_2eproto;
namespace ProtoMessage {
class Inst;
struct InstDefaultTypeInternal;
extern InstDefaultTypeInternal _Inst_default_instance_;
class InstHeader;
struct InstHeaderDefaultTypeInternal;
extern InstHeaderDefaultTypeInternal _InstHeader_default_instance_;
class Inst_MemAccess;
struct Inst_MemAccessDefaultTypeInternal;
extern Inst_MemAccessDefaultTypeInternal _Inst_MemAccess_default_instance_;
}  // namespace ProtoMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoMessage::Inst* Arena::CreateMaybeMessage<::ProtoMessage::Inst>(Arena*);
template<> ::ProtoMessage::InstHeader* Arena::CreateMaybeMessage<::ProtoMessage::InstHeader>(Arena*);
template<> ::ProtoMessage::Inst_MemAccess* Arena::CreateMaybeMessage<::ProtoMessage::Inst_MemAccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoMessage {

enum Inst_InstType : int {
  Inst_InstType_None = 0,
  Inst_InstType_IntAlu = 1,
  Inst_InstType_IntMul = 2,
  Inst_InstType_IntDiv = 3,
  Inst_InstType_FloatAdd = 4,
  Inst_InstType_FloatCmp = 5,
  Inst_InstType_FloatCvt = 6,
  Inst_InstType_FloatMult = 7,
  Inst_InstType_FloatDiv = 8,
  Inst_InstType_FloatSqrt = 9,
  Inst_InstType_SIMDIntAdd = 10,
  Inst_InstType_SIMDIntAddAcc = 11,
  Inst_InstType_SIMDIntAlu = 12,
  Inst_InstType_SIMDIntCmp = 13,
  Inst_InstType_SIMDIntCvt = 14,
  Inst_InstType_SIMDMisc = 15,
  Inst_InstType_SIMDIntMult = 16,
  Inst_InstType_SIMDIntMultAcc = 17,
  Inst_InstType_SIMDIntShift = 18,
  Inst_InstType_SIMDIntShiftAcc = 19,
  Inst_InstType_SIMDSqrt = 20,
  Inst_InstType_SIMDFloatAdd = 21,
  Inst_InstType_SIMDFloatAlu = 22,
  Inst_InstType_SIMDFloatCmp = 23,
  Inst_InstType_SIMDFloatCvt = 24,
  Inst_InstType_SIMDFloatDiv = 25,
  Inst_InstType_SIMDFloatMisc = 26,
  Inst_InstType_SIMDFloatMult = 27,
  Inst_InstType_SIMDFloatMultAdd = 28,
  Inst_InstType_SIMDFloatSqrt = 29,
  Inst_InstType_MemRead = 30,
  Inst_InstType_MemWrite = 31,
  Inst_InstType_IprAccess = 32,
  Inst_InstType_InstPrefetch = 33
};
bool Inst_InstType_IsValid(int value);
constexpr Inst_InstType Inst_InstType_InstType_MIN = Inst_InstType_None;
constexpr Inst_InstType Inst_InstType_InstType_MAX = Inst_InstType_InstPrefetch;
constexpr int Inst_InstType_InstType_ARRAYSIZE = Inst_InstType_InstType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inst_InstType_descriptor();
template<typename T>
inline const std::string& Inst_InstType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Inst_InstType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Inst_InstType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Inst_InstType_descriptor(), enum_t_value);
}
inline bool Inst_InstType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Inst_InstType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Inst_InstType>(
    Inst_InstType_descriptor(), name, value);
}
// ===================================================================

class InstHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.InstHeader) */ {
 public:
  inline InstHeader() : InstHeader(nullptr) {}
  ~InstHeader() override;
  explicit PROTOBUF_CONSTEXPR InstHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstHeader(const InstHeader& from);
  InstHeader(InstHeader&& from) noexcept
    : InstHeader() {
    *this = ::std::move(from);
  }

  inline InstHeader& operator=(const InstHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstHeader& operator=(InstHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstHeader* internal_default_instance() {
    return reinterpret_cast<const InstHeader*>(
               &_InstHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstHeader& a, InstHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(InstHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstHeader& from) {
    InstHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.InstHeader";
  }
  protected:
  explicit InstHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjIdFieldNumber = 1,
    kTickFreqFieldNumber = 3,
    kVerFieldNumber = 2,
    kHasMemFieldNumber = 4,
  };
  // required string obj_id = 1;
  bool has_obj_id() const;
  private:
  bool _internal_has_obj_id() const;
  public:
  void clear_obj_id();
  const std::string& obj_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obj_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obj_id();
  PROTOBUF_NODISCARD std::string* release_obj_id();
  void set_allocated_obj_id(std::string* obj_id);
  private:
  const std::string& _internal_obj_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obj_id(const std::string& value);
  std::string* _internal_mutable_obj_id();
  public:

  // required uint64 tick_freq = 3;
  bool has_tick_freq() const;
  private:
  bool _internal_has_tick_freq() const;
  public:
  void clear_tick_freq();
  uint64_t tick_freq() const;
  void set_tick_freq(uint64_t value);
  private:
  uint64_t _internal_tick_freq() const;
  void _internal_set_tick_freq(uint64_t value);
  public:

  // required uint32 ver = 2 [default = 0];
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  uint32_t ver() const;
  void set_ver(uint32_t value);
  private:
  uint32_t _internal_ver() const;
  void _internal_set_ver(uint32_t value);
  public:

  // required bool has_mem = 4;
  bool has_has_mem() const;
  private:
  bool _internal_has_has_mem() const;
  public:
  void clear_has_mem();
  bool has_mem() const;
  void set_has_mem(bool value);
  private:
  bool _internal_has_mem() const;
  void _internal_set_has_mem(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.InstHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_id_;
    uint64_t tick_freq_;
    uint32_t ver_;
    bool has_mem_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inst_2eproto;
};
// -------------------------------------------------------------------

class Inst_MemAccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.Inst.MemAccess) */ {
 public:
  inline Inst_MemAccess() : Inst_MemAccess(nullptr) {}
  ~Inst_MemAccess() override;
  explicit PROTOBUF_CONSTEXPR Inst_MemAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Inst_MemAccess(const Inst_MemAccess& from);
  Inst_MemAccess(Inst_MemAccess&& from) noexcept
    : Inst_MemAccess() {
    *this = ::std::move(from);
  }

  inline Inst_MemAccess& operator=(const Inst_MemAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inst_MemAccess& operator=(Inst_MemAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inst_MemAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const Inst_MemAccess* internal_default_instance() {
    return reinterpret_cast<const Inst_MemAccess*>(
               &_Inst_MemAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Inst_MemAccess& a, Inst_MemAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Inst_MemAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inst_MemAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Inst_MemAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Inst_MemAccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Inst_MemAccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Inst_MemAccess& from) {
    Inst_MemAccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst_MemAccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.Inst.MemAccess";
  }
  protected:
  explicit Inst_MemAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kSizeFieldNumber = 2,
    kMemFlagsFieldNumber = 3,
  };
  // required uint64 addr = 1;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  uint64_t addr() const;
  void set_addr(uint64_t value);
  private:
  uint64_t _internal_addr() const;
  void _internal_set_addr(uint64_t value);
  public:

  // required uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // optional uint32 mem_flags = 3;
  bool has_mem_flags() const;
  private:
  bool _internal_has_mem_flags() const;
  public:
  void clear_mem_flags();
  uint32_t mem_flags() const;
  void set_mem_flags(uint32_t value);
  private:
  uint32_t _internal_mem_flags() const;
  void _internal_set_mem_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.Inst.MemAccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t addr_;
    uint32_t size_;
    uint32_t mem_flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inst_2eproto;
};
// -------------------------------------------------------------------

class Inst final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoMessage.Inst) */ {
 public:
  inline Inst() : Inst(nullptr) {}
  ~Inst() override;
  explicit PROTOBUF_CONSTEXPR Inst(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Inst(const Inst& from);
  Inst(Inst&& from) noexcept
    : Inst() {
    *this = ::std::move(from);
  }

  inline Inst& operator=(const Inst& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inst& operator=(Inst&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inst& default_instance() {
    return *internal_default_instance();
  }
  static inline const Inst* internal_default_instance() {
    return reinterpret_cast<const Inst*>(
               &_Inst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Inst& a, Inst& b) {
    a.Swap(&b);
  }
  inline void Swap(Inst* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Inst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Inst>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Inst& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Inst& from) {
    Inst::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inst* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoMessage.Inst";
  }
  protected:
  explicit Inst(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Inst_MemAccess MemAccess;

  typedef Inst_InstType InstType;
  static constexpr InstType None =
    Inst_InstType_None;
  static constexpr InstType IntAlu =
    Inst_InstType_IntAlu;
  static constexpr InstType IntMul =
    Inst_InstType_IntMul;
  static constexpr InstType IntDiv =
    Inst_InstType_IntDiv;
  static constexpr InstType FloatAdd =
    Inst_InstType_FloatAdd;
  static constexpr InstType FloatCmp =
    Inst_InstType_FloatCmp;
  static constexpr InstType FloatCvt =
    Inst_InstType_FloatCvt;
  static constexpr InstType FloatMult =
    Inst_InstType_FloatMult;
  static constexpr InstType FloatDiv =
    Inst_InstType_FloatDiv;
  static constexpr InstType FloatSqrt =
    Inst_InstType_FloatSqrt;
  static constexpr InstType SIMDIntAdd =
    Inst_InstType_SIMDIntAdd;
  static constexpr InstType SIMDIntAddAcc =
    Inst_InstType_SIMDIntAddAcc;
  static constexpr InstType SIMDIntAlu =
    Inst_InstType_SIMDIntAlu;
  static constexpr InstType SIMDIntCmp =
    Inst_InstType_SIMDIntCmp;
  static constexpr InstType SIMDIntCvt =
    Inst_InstType_SIMDIntCvt;
  static constexpr InstType SIMDMisc =
    Inst_InstType_SIMDMisc;
  static constexpr InstType SIMDIntMult =
    Inst_InstType_SIMDIntMult;
  static constexpr InstType SIMDIntMultAcc =
    Inst_InstType_SIMDIntMultAcc;
  static constexpr InstType SIMDIntShift =
    Inst_InstType_SIMDIntShift;
  static constexpr InstType SIMDIntShiftAcc =
    Inst_InstType_SIMDIntShiftAcc;
  static constexpr InstType SIMDSqrt =
    Inst_InstType_SIMDSqrt;
  static constexpr InstType SIMDFloatAdd =
    Inst_InstType_SIMDFloatAdd;
  static constexpr InstType SIMDFloatAlu =
    Inst_InstType_SIMDFloatAlu;
  static constexpr InstType SIMDFloatCmp =
    Inst_InstType_SIMDFloatCmp;
  static constexpr InstType SIMDFloatCvt =
    Inst_InstType_SIMDFloatCvt;
  static constexpr InstType SIMDFloatDiv =
    Inst_InstType_SIMDFloatDiv;
  static constexpr InstType SIMDFloatMisc =
    Inst_InstType_SIMDFloatMisc;
  static constexpr InstType SIMDFloatMult =
    Inst_InstType_SIMDFloatMult;
  static constexpr InstType SIMDFloatMultAdd =
    Inst_InstType_SIMDFloatMultAdd;
  static constexpr InstType SIMDFloatSqrt =
    Inst_InstType_SIMDFloatSqrt;
  static constexpr InstType MemRead =
    Inst_InstType_MemRead;
  static constexpr InstType MemWrite =
    Inst_InstType_MemWrite;
  static constexpr InstType IprAccess =
    Inst_InstType_IprAccess;
  static constexpr InstType InstPrefetch =
    Inst_InstType_InstPrefetch;
  static inline bool InstType_IsValid(int value) {
    return Inst_InstType_IsValid(value);
  }
  static constexpr InstType InstType_MIN =
    Inst_InstType_InstType_MIN;
  static constexpr InstType InstType_MAX =
    Inst_InstType_InstType_MAX;
  static constexpr int InstType_ARRAYSIZE =
    Inst_InstType_InstType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InstType_descriptor() {
    return Inst_InstType_descriptor();
  }
  template<typename T>
  static inline const std::string& InstType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstType_Name.");
    return Inst_InstType_Name(enum_t_value);
  }
  static inline bool InstType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InstType* value) {
    return Inst_InstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemAccessFieldNumber = 8,
    kInstBytesFieldNumber = 9,
    kPcFieldNumber = 1,
    kInstFieldNumber = 2,
    kNodeidFieldNumber = 3,
    kTickFieldNumber = 5,
    kCpuidFieldNumber = 4,
    kTypeFieldNumber = 6,
    kInstFlagsFieldNumber = 7,
  };
  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  int mem_access_size() const;
  private:
  int _internal_mem_access_size() const;
  public:
  void clear_mem_access();
  ::ProtoMessage::Inst_MemAccess* mutable_mem_access(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::Inst_MemAccess >*
      mutable_mem_access();
  private:
  const ::ProtoMessage::Inst_MemAccess& _internal_mem_access(int index) const;
  ::ProtoMessage::Inst_MemAccess* _internal_add_mem_access();
  public:
  const ::ProtoMessage::Inst_MemAccess& mem_access(int index) const;
  ::ProtoMessage::Inst_MemAccess* add_mem_access();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::Inst_MemAccess >&
      mem_access() const;

  // optional bytes inst_bytes = 9;
  bool has_inst_bytes() const;
  private:
  bool _internal_has_inst_bytes() const;
  public:
  void clear_inst_bytes();
  const std::string& inst_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inst_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inst_bytes();
  PROTOBUF_NODISCARD std::string* release_inst_bytes();
  void set_allocated_inst_bytes(std::string* inst_bytes);
  private:
  const std::string& _internal_inst_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inst_bytes(const std::string& value);
  std::string* _internal_mutable_inst_bytes();
  public:

  // required uint64 pc = 1;
  bool has_pc() const;
  private:
  bool _internal_has_pc() const;
  public:
  void clear_pc();
  uint64_t pc() const;
  void set_pc(uint64_t value);
  private:
  uint64_t _internal_pc() const;
  void _internal_set_pc(uint64_t value);
  public:

  // optional fixed32 inst = 2;
  bool has_inst() const;
  private:
  bool _internal_has_inst() const;
  public:
  void clear_inst();
  uint32_t inst() const;
  void set_inst(uint32_t value);
  private:
  uint32_t _internal_inst() const;
  void _internal_set_inst(uint32_t value);
  public:

  // optional uint32 nodeid = 3;
  bool has_nodeid() const;
  private:
  bool _internal_has_nodeid() const;
  public:
  void clear_nodeid();
  uint32_t nodeid() const;
  void set_nodeid(uint32_t value);
  private:
  uint32_t _internal_nodeid() const;
  void _internal_set_nodeid(uint32_t value);
  public:

  // optional fixed64 tick = 5;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  uint64_t tick() const;
  void set_tick(uint64_t value);
  private:
  uint64_t _internal_tick() const;
  void _internal_set_tick(uint64_t value);
  public:

  // optional uint32 cpuid = 4;
  bool has_cpuid() const;
  private:
  bool _internal_has_cpuid() const;
  public:
  void clear_cpuid();
  uint32_t cpuid() const;
  void set_cpuid(uint32_t value);
  private:
  uint32_t _internal_cpuid() const;
  void _internal_set_cpuid(uint32_t value);
  public:

  // optional .ProtoMessage.Inst.InstType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ProtoMessage::Inst_InstType type() const;
  void set_type(::ProtoMessage::Inst_InstType value);
  private:
  ::ProtoMessage::Inst_InstType _internal_type() const;
  void _internal_set_type(::ProtoMessage::Inst_InstType value);
  public:

  // optional uint32 inst_flags = 7;
  bool has_inst_flags() const;
  private:
  bool _internal_has_inst_flags() const;
  public:
  void clear_inst_flags();
  uint32_t inst_flags() const;
  void set_inst_flags(uint32_t value);
  private:
  uint32_t _internal_inst_flags() const;
  void _internal_set_inst_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoMessage.Inst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::Inst_MemAccess > mem_access_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inst_bytes_;
    uint64_t pc_;
    uint32_t inst_;
    uint32_t nodeid_;
    uint64_t tick_;
    uint32_t cpuid_;
    int type_;
    uint32_t inst_flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inst_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstHeader

// required string obj_id = 1;
inline bool InstHeader::_internal_has_obj_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstHeader::has_obj_id() const {
  return _internal_has_obj_id();
}
inline void InstHeader::clear_obj_id() {
  _impl_.obj_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstHeader::obj_id() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.obj_id)
  return _internal_obj_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstHeader::set_obj_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.obj_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.obj_id)
}
inline std::string* InstHeader::mutable_obj_id() {
  std::string* _s = _internal_mutable_obj_id();
  // @@protoc_insertion_point(field_mutable:ProtoMessage.InstHeader.obj_id)
  return _s;
}
inline const std::string& InstHeader::_internal_obj_id() const {
  return _impl_.obj_id_.Get();
}
inline void InstHeader::_internal_set_obj_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.obj_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InstHeader::_internal_mutable_obj_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.obj_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InstHeader::release_obj_id() {
  // @@protoc_insertion_point(field_release:ProtoMessage.InstHeader.obj_id)
  if (!_internal_has_obj_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.obj_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obj_id_.IsDefault()) {
    _impl_.obj_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InstHeader::set_allocated_obj_id(std::string* obj_id) {
  if (obj_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.obj_id_.SetAllocated(obj_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obj_id_.IsDefault()) {
    _impl_.obj_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.InstHeader.obj_id)
}

// required uint32 ver = 2 [default = 0];
inline bool InstHeader::_internal_has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InstHeader::has_ver() const {
  return _internal_has_ver();
}
inline void InstHeader::clear_ver() {
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t InstHeader::_internal_ver() const {
  return _impl_.ver_;
}
inline uint32_t InstHeader::ver() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.ver)
  return _internal_ver();
}
inline void InstHeader::_internal_set_ver(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ver_ = value;
}
inline void InstHeader::set_ver(uint32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.ver)
}

// required uint64 tick_freq = 3;
inline bool InstHeader::_internal_has_tick_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstHeader::has_tick_freq() const {
  return _internal_has_tick_freq();
}
inline void InstHeader::clear_tick_freq() {
  _impl_.tick_freq_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t InstHeader::_internal_tick_freq() const {
  return _impl_.tick_freq_;
}
inline uint64_t InstHeader::tick_freq() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.tick_freq)
  return _internal_tick_freq();
}
inline void InstHeader::_internal_set_tick_freq(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tick_freq_ = value;
}
inline void InstHeader::set_tick_freq(uint64_t value) {
  _internal_set_tick_freq(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.tick_freq)
}

// required bool has_mem = 4;
inline bool InstHeader::_internal_has_has_mem() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InstHeader::has_has_mem() const {
  return _internal_has_has_mem();
}
inline void InstHeader::clear_has_mem() {
  _impl_.has_mem_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool InstHeader::_internal_has_mem() const {
  return _impl_.has_mem_;
}
inline bool InstHeader::has_mem() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.has_mem)
  return _internal_has_mem();
}
inline void InstHeader::_internal_set_has_mem(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.has_mem_ = value;
}
inline void InstHeader::set_has_mem(bool value) {
  _internal_set_has_mem(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.has_mem)
}

// -------------------------------------------------------------------

// Inst_MemAccess

// required uint64 addr = 1;
inline bool Inst_MemAccess::_internal_has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Inst_MemAccess::has_addr() const {
  return _internal_has_addr();
}
inline void Inst_MemAccess::clear_addr() {
  _impl_.addr_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Inst_MemAccess::_internal_addr() const {
  return _impl_.addr_;
}
inline uint64_t Inst_MemAccess::addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.MemAccess.addr)
  return _internal_addr();
}
inline void Inst_MemAccess::_internal_set_addr(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.addr_ = value;
}
inline void Inst_MemAccess::set_addr(uint64_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.MemAccess.addr)
}

// required uint32 size = 2;
inline bool Inst_MemAccess::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Inst_MemAccess::has_size() const {
  return _internal_has_size();
}
inline void Inst_MemAccess::clear_size() {
  _impl_.size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Inst_MemAccess::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t Inst_MemAccess::size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.MemAccess.size)
  return _internal_size();
}
inline void Inst_MemAccess::_internal_set_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_ = value;
}
inline void Inst_MemAccess::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.MemAccess.size)
}

// optional uint32 mem_flags = 3;
inline bool Inst_MemAccess::_internal_has_mem_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Inst_MemAccess::has_mem_flags() const {
  return _internal_has_mem_flags();
}
inline void Inst_MemAccess::clear_mem_flags() {
  _impl_.mem_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Inst_MemAccess::_internal_mem_flags() const {
  return _impl_.mem_flags_;
}
inline uint32_t Inst_MemAccess::mem_flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.MemAccess.mem_flags)
  return _internal_mem_flags();
}
inline void Inst_MemAccess::_internal_set_mem_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mem_flags_ = value;
}
inline void Inst_MemAccess::set_mem_flags(uint32_t value) {
  _internal_set_mem_flags(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.MemAccess.mem_flags)
}

// -------------------------------------------------------------------

// Inst

// required uint64 pc = 1;
inline bool Inst::_internal_has_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Inst::has_pc() const {
  return _internal_has_pc();
}
inline void Inst::clear_pc() {
  _impl_.pc_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Inst::_internal_pc() const {
  return _impl_.pc_;
}
inline uint64_t Inst::pc() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.pc)
  return _internal_pc();
}
inline void Inst::_internal_set_pc(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pc_ = value;
}
inline void Inst::set_pc(uint64_t value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.pc)
}

// optional fixed32 inst = 2;
inline bool Inst::_internal_has_inst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Inst::has_inst() const {
  return _internal_has_inst();
}
inline void Inst::clear_inst() {
  _impl_.inst_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Inst::_internal_inst() const {
  return _impl_.inst_;
}
inline uint32_t Inst::inst() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.inst)
  return _internal_inst();
}
inline void Inst::_internal_set_inst(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.inst_ = value;
}
inline void Inst::set_inst(uint32_t value) {
  _internal_set_inst(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.inst)
}

// optional bytes inst_bytes = 9;
inline bool Inst::_internal_has_inst_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Inst::has_inst_bytes() const {
  return _internal_has_inst_bytes();
}
inline void Inst::clear_inst_bytes() {
  _impl_.inst_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Inst::inst_bytes() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.inst_bytes)
  return _internal_inst_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Inst::set_inst_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.inst_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.inst_bytes)
}
inline std::string* Inst::mutable_inst_bytes() {
  std::string* _s = _internal_mutable_inst_bytes();
  // @@protoc_insertion_point(field_mutable:ProtoMessage.Inst.inst_bytes)
  return _s;
}
inline const std::string& Inst::_internal_inst_bytes() const {
  return _impl_.inst_bytes_.Get();
}
inline void Inst::_internal_set_inst_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inst_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Inst::_internal_mutable_inst_bytes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.inst_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Inst::release_inst_bytes() {
  // @@protoc_insertion_point(field_release:ProtoMessage.Inst.inst_bytes)
  if (!_internal_has_inst_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.inst_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inst_bytes_.IsDefault()) {
    _impl_.inst_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Inst::set_allocated_inst_bytes(std::string* inst_bytes) {
  if (inst_bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.inst_bytes_.SetAllocated(inst_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inst_bytes_.IsDefault()) {
    _impl_.inst_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.Inst.inst_bytes)
}

// optional uint32 nodeid = 3;
inline bool Inst::_internal_has_nodeid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Inst::has_nodeid() const {
  return _internal_has_nodeid();
}
inline void Inst::clear_nodeid() {
  _impl_.nodeid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Inst::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline uint32_t Inst::nodeid() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.nodeid)
  return _internal_nodeid();
}
inline void Inst::_internal_set_nodeid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nodeid_ = value;
}
inline void Inst::set_nodeid(uint32_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.nodeid)
}

// optional uint32 cpuid = 4;
inline bool Inst::_internal_has_cpuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Inst::has_cpuid() const {
  return _internal_has_cpuid();
}
inline void Inst::clear_cpuid() {
  _impl_.cpuid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Inst::_internal_cpuid() const {
  return _impl_.cpuid_;
}
inline uint32_t Inst::cpuid() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.cpuid)
  return _internal_cpuid();
}
inline void Inst::_internal_set_cpuid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cpuid_ = value;
}
inline void Inst::set_cpuid(uint32_t value) {
  _internal_set_cpuid(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.cpuid)
}

// optional fixed64 tick = 5;
inline bool Inst::_internal_has_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Inst::has_tick() const {
  return _internal_has_tick();
}
inline void Inst::clear_tick() {
  _impl_.tick_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t Inst::_internal_tick() const {
  return _impl_.tick_;
}
inline uint64_t Inst::tick() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.tick)
  return _internal_tick();
}
inline void Inst::_internal_set_tick(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tick_ = value;
}
inline void Inst::set_tick(uint64_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.tick)
}

// optional .ProtoMessage.Inst.InstType type = 6;
inline bool Inst::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Inst::has_type() const {
  return _internal_has_type();
}
inline void Inst::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::ProtoMessage::Inst_InstType Inst::_internal_type() const {
  return static_cast< ::ProtoMessage::Inst_InstType >(_impl_.type_);
}
inline ::ProtoMessage::Inst_InstType Inst::type() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.type)
  return _internal_type();
}
inline void Inst::_internal_set_type(::ProtoMessage::Inst_InstType value) {
  assert(::ProtoMessage::Inst_InstType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.type_ = value;
}
inline void Inst::set_type(::ProtoMessage::Inst_InstType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.type)
}

// optional uint32 inst_flags = 7;
inline bool Inst::_internal_has_inst_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Inst::has_inst_flags() const {
  return _internal_has_inst_flags();
}
inline void Inst::clear_inst_flags() {
  _impl_.inst_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t Inst::_internal_inst_flags() const {
  return _impl_.inst_flags_;
}
inline uint32_t Inst::inst_flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.inst_flags)
  return _internal_inst_flags();
}
inline void Inst::_internal_set_inst_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.inst_flags_ = value;
}
inline void Inst::set_inst_flags(uint32_t value) {
  _internal_set_inst_flags(value);
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.inst_flags)
}

// repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
inline int Inst::_internal_mem_access_size() const {
  return _impl_.mem_access_.size();
}
inline int Inst::mem_access_size() const {
  return _internal_mem_access_size();
}
inline void Inst::clear_mem_access() {
  _impl_.mem_access_.Clear();
}
inline ::ProtoMessage::Inst_MemAccess* Inst::mutable_mem_access(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.Inst.mem_access)
  return _impl_.mem_access_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::Inst_MemAccess >*
Inst::mutable_mem_access() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.Inst.mem_access)
  return &_impl_.mem_access_;
}
inline const ::ProtoMessage::Inst_MemAccess& Inst::_internal_mem_access(int index) const {
  return _impl_.mem_access_.Get(index);
}
inline const ::ProtoMessage::Inst_MemAccess& Inst::mem_access(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.mem_access)
  return _internal_mem_access(index);
}
inline ::ProtoMessage::Inst_MemAccess* Inst::_internal_add_mem_access() {
  return _impl_.mem_access_.Add();
}
inline ::ProtoMessage::Inst_MemAccess* Inst::add_mem_access() {
  ::ProtoMessage::Inst_MemAccess* _add = _internal_add_mem_access();
  // @@protoc_insertion_point(field_add:ProtoMessage.Inst.mem_access)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoMessage::Inst_MemAccess >&
Inst::mem_access() const {
  // @@protoc_insertion_point(field_list:ProtoMessage.Inst.mem_access)
  return _impl_.mem_access_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoMessage::Inst_InstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMessage::Inst_InstType>() {
  return ::ProtoMessage::Inst_InstType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inst_2eproto
